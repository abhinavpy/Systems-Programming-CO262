$date
	Tue Oct 23 11:54:27 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module t_ALU $end
$var wire 1 ! zero $end
$var wire 1 " result $end
$var wire 1 # Cout $end
$var reg 1 $ Ainvert $end
$var reg 1 % Binvert $end
$var reg 1 & Cin $end
$var reg 2 ' Op [1:0] $end
$var reg 1 ( a $end
$var reg 1 ) b $end
$scope module alu $end
$var wire 1 $ Ainvert $end
$var wire 1 % Binvert $end
$var wire 1 & Cin $end
$var wire 2 * Op [1:0] $end
$var wire 1 ( a $end
$var wire 1 ) b $end
$var wire 1 " result $end
$var wire 4 + out [3:0] $end
$var wire 1 , ob $end
$var wire 1 - oa $end
$var wire 2 . in_b [1:0] $end
$var wire 2 / in_a [1:0] $end
$var wire 1 # Cout $end
$var reg 1 ! zero $end
$scope module S $end
$var wire 1 & Cin $end
$var wire 1 # Cout $end
$var wire 1 0 S1 $end
$var wire 1 1 S $end
$var wire 1 2 C2 $end
$var wire 1 3 C1 $end
$var wire 1 , B $end
$var wire 1 - A $end
$scope module HA1 $end
$var wire 1 3 C $end
$var wire 1 0 S $end
$var wire 1 , B $end
$var wire 1 - A $end
$upscope $end
$scope module HA2 $end
$var wire 1 0 A $end
$var wire 1 & B $end
$var wire 1 2 C $end
$var wire 1 1 S $end
$upscope $end
$upscope $end
$scope module m1 $end
$var wire 2 4 in [1:0] $end
$var wire 1 $ select $end
$var wire 1 - out $end
$upscope $end
$scope module m2 $end
$var wire 2 5 in [1:0] $end
$var wire 1 % select $end
$var wire 1 , out $end
$upscope $end
$scope module m3 $end
$var wire 4 6 in [3:0] $end
$var wire 2 7 select [1:0] $end
$var wire 1 " out $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 7
bzxxx 6
bx 5
bx 4
x3
x2
x1
x0
bx /
bx .
x-
x,
bzxxx +
bx *
x)
x(
bx '
x&
x%
x$
x#
x"
x!
$end
#20
01
0#
00
03
0"
bz000 +
bz000 6
02
0!
0-
b10 /
b10 4
0(
0,
b10 .
b10 5
0)
b0 '
b0 *
b0 7
0$
0%
0&
#30
11
10
bz110 +
bz110 6
1!
1,
b1 .
b1 5
1)
#40
1-
b1 /
b1 4
1(
0,
b10 .
b10 5
0)
#50
01
1#
00
13
1"
bz011 +
bz011 6
1,
b1 .
b1 5
1)
#60
0#
03
0"
bz000 +
bz000 6
0!
0-
b10 /
b10 4
0(
0,
b10 .
b10 5
0)
b1 '
b1 *
b1 7
#70
11
10
1"
bz110 +
bz110 6
1!
1,
b1 .
b1 5
1)
#80
0!
1-
b1 /
b1 4
1(
0,
b10 .
b10 5
0)
#90
01
1#
00
13
bz011 +
bz011 6
1,
b1 .
b1 5
1)
#100
1#
13
1"
bzx11 +
bzx11 6
x1
b10 /
b10 4
0(
b10 .
b10 5
0)
1-
1$
1,
1%
x&
#110
x2
x#
10
03
bzx10 +
bzx10 6
0,
b1 .
b1 5
1)
#120
0-
1,
b1 /
b1 4
1(
b10 .
b10 5
0)
#130
0#
02
00
0"
bzx00 +
bzx00 6
0,
b1 .
b1 5
1)
#140
1#
13
1"
bzx11 +
bzx11 6
1-
1,
1!
b10 /
b10 4
0(
b10 .
b10 5
0)
b0 '
b0 *
b0 7
#150
x2
x#
10
03
0"
bzx10 +
bzx10 6
0,
0!
b1 .
b1 5
1)
#160
0-
1,
1!
b1 /
b1 4
1(
b10 .
b10 5
0)
#170
0#
02
00
bzx00 +
bzx00 6
0,
b1 .
b1 5
1)
#180
bz000 +
bz000 6
01
0!
b10 /
b10 4
0(
b10 .
b10 5
0)
0"
b10 '
b10 *
b10 7
0-
0$
0,
0%
0&
#190
1"
11
10
bz110 +
bz110 6
1!
1,
b1 .
b1 5
1)
#200
0!
1-
b1 /
b1 4
1(
0,
b10 .
b10 5
0)
#210
0"
01
1#
00
13
bz011 +
bz011 6
1,
b1 .
b1 5
1)
#220
12
10
1#
03
0"
bz010 +
bz010 6
01
1!
0-
b10 /
b10 4
0(
b10 .
b10 5
0)
1,
1%
1&
#230
0#
02
1"
11
00
bz100 +
bz100 6
0,
b1 .
b1 5
1)
#240
1#
13
bz111 +
bz111 6
1,
0!
1-
b1 /
b1 4
1(
b10 .
b10 5
0)
#250
12
0"
01
1#
10
03
bz010 +
bz010 6
0,
b1 .
b1 5
1)
#260
